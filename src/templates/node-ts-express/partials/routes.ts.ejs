// Auto-generated by create-backlist on <%= new Date().toISOString() %>
import { Router, Request, Response } from 'express';
<%# Create a unique set of controller names from the endpoints array %>
<% const controllersToImport = new Set(endpoints.map(ep => ep.controllerName).filter(name => name !== 'Default')); %>

// Import all the generated controllers
<% for (const controller of controllersToImport) { %>
import * as <%= controller %>Controller from '../controllers/<%= controller %>.controller';
<% } %>

const router = Router();

<%# Loop through each endpoint found by the analyzer %>
<% endpoints.forEach(endpoint => { %>
<%
  // Convert URL path for Express router (e.g., /api/users/{id} -> /users/:id)
  const expressPath = endpoint.path.replace('/api', '').replace(/{(\w+)}/g, ':$1');
  const controllerName = endpoint.controllerName;
  let handlerFunction;

  // --- LOGIC TO MAP ENDPOINT TO A CRUD CONTROLLER FUNCTION ---
  // This logic assumes a standard RESTful API structure.
  
  if (controllerName !== 'Default') {
    if (endpoint.method === 'POST' && !expressPath.includes(':')) {
      // e.g., POST /users -> create a new user
      handlerFunction = `${controllerName}Controller.create${controllerName}`;
    } else if (endpoint.method === 'GET' && !expressPath.includes(':')) {
      // e.g., GET /users -> get all users
      handlerFunction = `${controllerName}Controller.getAll${controllerName}s`;
    } else if (endpoint.method === 'GET' && expressPath.includes(':')) {
      // e.g., GET /users/:id -> get a single user by ID
      handlerFunction = `${controllerName}Controller.get${controllerName}ById`;
    } else if (endpoint.method === 'PUT' && expressPath.includes(':')) {
      // e.g., PUT /users/:id -> update a user by ID
      handlerFunction = `${controllerName}Controller.update${controllerName}ById`;
    } else if (endpoint.method === 'DELETE' && expressPath.includes(':')) {
      // e.g., DELETE /users/:id -> delete a user by ID
      handlerFunction = `${controllerName}Controller.delete${controllerName}ById`;
    }
  }

  // If no specific CRUD function matches, or if it's a default/unhandled route,
  // create a simple placeholder function.
  if (!handlerFunction) {
    handlerFunction = `(req: Request, res: Response) => {
      // TODO: Implement logic for this custom endpoint
      res.status(501).json({ message: 'Handler not implemented for <%= endpoint.method %> <%= expressPath %>' });
    }`;
  }
%>
/**
 * Route for <%= endpoint.method.toUpperCase() %> <%= endpoint.path %>
 * Mapped to: <%- handlerFunction.includes('=>') ? 'Inline Handler' : handlerFunction %>
 */
router.<%= endpoint.method.toLowerCase() %>('<%- expressPath %>', <%- handlerFunction %>);

<% }); %>

export default router;